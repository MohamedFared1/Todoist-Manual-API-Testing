{
	"info": {
		"_postman_id": "ccf7eb98-61d2-4f7a-8d53-ce746b4f3f77",
		"name": "ToDoistAPI/ITI Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37390963"
	},
	"item": [
		{
			"name": "Create a project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"Project_ID\", jsonData.id);\r",
							"// Test for successful response\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test if response is in JSON format\r",
							"pm.test(\"Response is in JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Test for the presence of required fields\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData).to.have.property('url');\r",
							"});\r",
							"\r",
							"// Test if the project name matches the input\r",
							"pm.test(\"Project name matches input\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Project_name\"));\r",
							"});\r",
							"\r",
							"// Test if the project ID is a non-empty string\r",
							"pm.test(\"Project ID is a non-empty string\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"// Test for specific values\r",
							"pm.test(\"Project details are correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.color).to.equal(\"charcoal\");\r",
							"    pm.expect(jsonData.is_shared).to.be.false;\r",
							"    pm.expect(jsonData.is_favorite).to.be.false;\r",
							"    pm.expect(jsonData.is_inbox_project).to.be.false;\r",
							"    pm.expect(jsonData.view_style).to.equal(\"list\");\r",
							"});\r",
							"\r",
							"// Test if the URL is correctly formatted\r",
							"pm.test(\"Project URL is correctly formatted\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.url).to.match(/^https:\\/\\/todoist\\.com\\/showProject\\?id=\\d+$/);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": " application/json",
						"type": "text"
					},
					{
						"key": "X-Request-Id",
						"value": " df03238d-dbe4-453a-a08d-713af737764f",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/projects?name={{Project_name}}&id={{Project_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"projects"
					],
					"query": [
						{
							"key": "name",
							"value": "{{Project_name}}"
						},
						{
							"key": "id",
							"value": "{{Project_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for successful response\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test if response is in JSON format\r",
							"pm.test(\"Response is in JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Test for the presence of required fields\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.include.keys('parent_id', 'order', 'color', 'name', 'comment_count', 'is_shared', 'is_favorite', 'is_inbox_project', 'is_team_inbox', 'url', 'view_style');\r",
							"});\r",
							"\r",
							"// Test specific values\r",
							"pm.test(\"Project details are correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.parent_id).to.be.null;\r",
							"    pm.expect(jsonData.order).to.equal(3);\r",
							"    pm.expect(jsonData.color).to.equal(\"charcoal\");\r",
							"    pm.expect(jsonData.name).to.equal(\"ITI\");\r",
							"    pm.expect(jsonData.comment_count).to.equal(0);\r",
							"    pm.expect(jsonData.is_shared).to.be.false;\r",
							"    pm.expect(jsonData.is_favorite).to.be.false;\r",
							"    pm.expect(jsonData.is_inbox_project).to.be.false;\r",
							"    pm.expect(jsonData.is_team_inbox).to.be.false;\r",
							"    pm.expect(jsonData.view_style).to.equal(\"list\");\r",
							"});\r",
							"\r",
							"// Test if the URL is correctly formatted\r",
							"pm.test(\"Project URL is correctly formatted\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.url).to.match(/^https:\\/\\/todoist\\.com\\/showProject\\?id=\\d+$/);\r",
							"});\r",
							"\r",
							"// Test if the project ID in the URL matches the requested project ID\r",
							"pm.test(\"Project ID in URL matches requested ID\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const urlId = jsonData.url.split('=')[1];\r",
							"    pm.expect(urlId).to.equal(pm.variables.get(\"Project_ID\"));\r",
							"});\r",
							"\r",
							"// Verify the response time is acceptable\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/projects/{{Project_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"projects",
						"{{Project_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for successful response\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test if response is in JSON format\r",
							"pm.test(\"Response is in JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Test for the presence of required fields\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.include.keys('id', 'parent_id', 'order', 'color', 'name', 'comment_count', 'is_shared', 'is_favorite', 'is_inbox_project', 'is_team_inbox', 'url', 'view_style');\r",
							"});\r",
							"\r",
							"// Test specific field values\r",
							"pm.test(\"Field values are correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.parent_id).to.be.null;\r",
							"\r",
							"    pm.expect(jsonData.color).to.equal(\"light_blue\");\r",
							"    pm.expect(jsonData.name).to.equal(\"ITI_Scholarship\");\r",
							"    pm.expect(jsonData.comment_count).to.equal(0);\r",
							"    pm.expect(jsonData.is_shared).to.be.false;\r",
							"    pm.expect(jsonData.is_favorite).to.be.false;\r",
							"    pm.expect(jsonData.is_inbox_project).to.be.false;\r",
							"    pm.expect(jsonData.is_team_inbox).to.be.false;\r",
							"    pm.expect(jsonData.view_style).to.equal(\"list\");\r",
							"});\r",
							"\r",
							"// Test URL format\r",
							"pm.test(\"URL is correctly formatted\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.url).to.equal(\"https://todoist.com/showProject?id=2339788071\");\r",
							"});\r",
							"\r",
							"// Verify the response time is acceptable\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"value": "d08589ef-de4e-4ebd-9927-0ee6bd77308f"
					},
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/rest/v2/projects/{{Project_ID}}?name=ITI_Scholarship&color=light_blue",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"projects",
						"{{Project_ID}}"
					],
					"query": [
						{
							"key": "name",
							"value": "ITI_Scholarship"
						},
						{
							"key": "color",
							"value": "light_blue"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all projects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assert that the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the response body as JSON\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Assert that the response is an array\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Iterate over each project in the array\r",
							"jsonData.forEach(function(project, index) {\r",
							"    // Test that each project has all required properties\r",
							"    pm.test(`Project ${index + 1} has all required properties`, function () {\r",
							"        pm.expect(project).to.have.property('id');\r",
							"        pm.expect(project).to.have.property('parent_id');\r",
							"        pm.expect(project).to.have.property('order');\r",
							"        pm.expect(project).to.have.property('color');\r",
							"        pm.expect(project).to.have.property('name');\r",
							"        pm.expect(project).to.have.property('comment_count');\r",
							"        pm.expect(project).to.have.property('is_shared');\r",
							"        pm.expect(project).to.have.property('is_favorite');\r",
							"        pm.expect(project).to.have.property('is_inbox_project');\r",
							"        pm.expect(project).to.have.property('is_team_inbox');\r",
							"        pm.expect(project).to.have.property('url');\r",
							"        pm.expect(project).to.have.property('view_style');\r",
							"    });\r",
							"\r",
							"    // Test that the properties have the correct data types\r",
							"    pm.test(`Project ${index + 1} properties have correct data types`, function () {\r",
							"        pm.expect(project.parent_id).to.be.oneOf([null, 'string', 'number']);\r",
							"        pm.expect(project.order).to.be.a('number');\r",
							"        pm.expect(project.color).to.be.a('string');\r",
							"        pm.expect(project.name).to.be.a('string');\r",
							"        pm.expect(project.comment_count).to.be.a('number');\r",
							"        pm.expect(project.is_shared).to.be.a('boolean');\r",
							"        pm.expect(project.is_favorite).to.be.a('boolean');\r",
							"        pm.expect(project.is_inbox_project).to.be.a('boolean');\r",
							"        pm.expect(project.is_team_inbox).to.be.a('boolean');\r",
							"        pm.expect(project.url).to.be.a('string');\r",
							"        pm.expect(project.view_style).to.be.a('string');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $ced7b1454a4b1d2279d45fe34a593d758ff561e7"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/projects",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"projects"
					]
				},
				"description": "Generated from cURL: curl -X GET \\\n  https://api.todoist.com/rest/v2/projects \\\n  -H \"Authorization: Bearer $token\""
			},
			"response": []
		},
		{
			"name": "Create a new section",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"Section_ID\", jsonData.id);\r",
							"\r",
							"\r",
							"// Test to check if the response status is 200 OK\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to ensure 'id' exists and is a number\r",
							"pm.test(\"Section ID is a string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'v2_id' exists and is a string\r",
							"pm.test(\"v2 ID exists and is a string\", function () {\r",
							"    pm.expect(jsonData.v2_id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'project_id' exists and is a number\r",
							"pm.test(\"Project ID is a string\", function () {\r",
							"    pm.expect(jsonData.project_id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'order' exists and is a number\r",
							"pm.test(\"Order exists and is a number\", function () {\r",
							"    pm.expect(jsonData.order).to.be.a('number');\r",
							"});\r",
							"\r",
							"// Test to ensure 'name' exists and is a string\r",
							"pm.test(\"Section name is a string\", function () {\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.name).to.equal(\"Software-Testing\");  // Expected name\r",
							"});\r",
							"\r",
							"\r",
							"// Optional: Log the entire response to Postman console\r",
							"console.log(jsonData);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer YOUR_ACCESS_TOKEN"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/rest/v2/sections?name=Software-Testing&project_id={{Project_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"sections"
					],
					"query": [
						{
							"key": "name",
							"value": "Software-Testing"
						},
						{
							"key": "project_id",
							"value": "{{Project_ID}}"
						}
					]
				},
				"description": "Generated from cURL: curl -s -X POST --data '{\"project_id\":\"2203306141\", \"name\":\"Groceries\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"Authorization: Bearer $token\" \\\r\n    https://api.todoist.com/rest/v2/sections\r\n"
			},
			"response": []
		},
		{
			"name": "GetSection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body into JSON format\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Test to check if the response status is 200 OK\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to ensure 'id' exists and is a number\r",
							"pm.test(\"Section ID is a string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'v2_id' exists and is a string\r",
							"pm.test(\"v2 ID exists and is a string\", function () {\r",
							"    pm.expect(jsonData.v2_id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'project_id' exists and is a number\r",
							"pm.test(\"Project ID is a string\", function () {\r",
							"    pm.expect(jsonData.project_id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'v2_project_id' exists and is a string\r",
							"pm.test(\"v2_project_id exists and is a string\", function () {\r",
							"    pm.expect(jsonData.v2_project_id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'order' exists and is a number\r",
							"pm.test(\"Order exists and is a number\", function () {\r",
							"    pm.expect(jsonData.order).to.be.a('number');\r",
							"});\r",
							"\r",
							"// Test to ensure 'name' exists and is a string\r",
							"pm.test(\"Section name is a string\", function () {\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.name).to.equal(\"Software-Testing\");  // Expected name\r",
							"});\r",
							"\r",
							"// Test to check that the response time is within 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Optional: Log the entire response to Postman console\r",
							"console.log(jsonData);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/sections/{{Section_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"sections",
						"{{Section_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateSection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body into JSON format\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Test to check if the response status is 200 OK\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to ensure 'id' exists and is a number\r",
							"pm.test(\"Section ID is a string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'v2_id' exists and is a string\r",
							"pm.test(\"v2 ID exists and is a string\", function () {\r",
							"    pm.expect(jsonData.v2_id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'project_id' exists and is a number\r",
							"pm.test(\"Project ID is a string\", function () {\r",
							"    pm.expect(jsonData.project_id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'v2_project_id' exists and is a string\r",
							"pm.test(\"v2_project_id exists and is a string\", function () {\r",
							"    pm.expect(jsonData.v2_project_id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'order' exists and is a number\r",
							"pm.test(\"Order exists and is a number\", function () {\r",
							"    pm.expect(jsonData.order).to.be.a('number');\r",
							"});\r",
							"\r",
							"// Test to ensure 'name' is updated correctly\r",
							"pm.test(\"Section name is updated correctly\", function () {\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.name).to.equal(\"EmbeddedSystem\");  // Expected updated name\r",
							"});\r",
							"\r",
							"// Test to check that the response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Optional: Log the entire response to Postman console\r",
							"console.log(jsonData);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/rest/v2/sections/{{Section_ID}}?name=EmbeddedSystem&",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"sections",
						"{{Section_ID}}"
					],
					"query": [
						{
							"key": "name",
							"value": "EmbeddedSystem"
						},
						{
							"key": "",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GETallSections",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body into JSON format\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Test to check if the response status is 200 OK\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to check if the response is an array\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test to ensure each section in the array has the expected properties\r",
							"jsonData.forEach((section, index) => {\r",
							"    pm.test(`Section ${index + 1} has valid properties`, function () {\r",
							"        pm.expect(section).to.have.property('id').that.is.a('string');\r",
							"        pm.expect(section).to.have.property('v2_id').that.is.a('string');\r",
							"        pm.expect(section).to.have.property('project_id').that.is.a('string');\r",
							"        pm.expect(section).to.have.property('v2_project_id').that.is.a('string');\r",
							"        pm.expect(section).to.have.property('order').that.is.a('number');\r",
							"        pm.expect(section).to.have.property('name').that.is.a('string');\r",
							"      \r",
							"\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test to check that there is at least one section returned\r",
							"pm.test(\"At least one section is returned\", function () {\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// Test to check that the response time is below 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Optional: Log the entire response to Postman console\r",
							"console.log(jsonData);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/sections?project_id={{Project_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"sections"
					],
					"query": [
						{
							"key": "project_id",
							"value": "{{Project_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get active tasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body into JSON format\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Test to check if the response status is 200 OK\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to check if the response is an array of tasks\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test to ensure there is at least one task in the response\r",
							"pm.test(\"At least one task is returned\", function () {\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// Test to ensure each task has the expected properties\r",
							"jsonData.forEach((task, index) => {\r",
							"    pm.test(`Task ${index + 1} has valid properties`, function () {\r",
							"        pm.expect(task).to.have.property('id').that.is.a('string');\r",
							"        pm.expect(task).to.have.property('content').that.is.a('string');\r",
							"        pm.expect(task.content).to.not.be.empty;  // Ensure content is not empty\r",
							"\r",
							"        pm.expect(task).to.have.property('project_id').that.is.a('string');\r",
							"        pm.expect(task).to.have.property('order').that.is.a('number');\r",
							"        pm.expect(task).to.have.property('priority').that.is.a('number');\r",
							"\r",
							"        // Assignee details (can be null, as shown in the response)\r",
							"        pm.expect(task).to.have.property('assignee_id');\r",
							"        pm.expect(task).to.have.property('assigner_id');\r",
							"\r",
							"        // Optional properties, null check for 'due' and 'section_id'\r",
							"        pm.expect(task).to.have.property('due');\r",
							"        pm.expect(task.due).to.be.oneOf([null, 'object']);  // 'due' can be null or an object\r",
							"\r",
							"        // Ensure 'section_id' is either null or a string (dynamic check)\r",
							"        pm.test(\"Section ID is either null or a string\", function () {\r",
							"            pm.expect(task.section_id).to.satisfy((value) => {\r",
							"                return value === null || typeof value === 'string';\r",
							"            });\r",
							"        });\r",
							"\r",
							"        pm.expect(task).to.have.property('url').that.is.a('string');  // URL to the task\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test to check that the response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Optional: Log the entire response to Postman console\r",
							"console.log(jsonData);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/tasks",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"Task_ID\", jsonData.id);\r",
							"\r",
							"\r",
							"// Test to check if the response status is 200 OK\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to ensure 'id' exists and is a string\r",
							"pm.test(\"Task ID is a string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'project_id' exists and is a string\r",
							"pm.test(\"Project ID is a string\", function () {\r",
							"    pm.expect(jsonData.project_id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'section_id' exists and is a string\r",
							"pm.test(\"Section ID is a string\", function () {\r",
							"    pm.expect(jsonData.section_id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'content' exists and matches the input\r",
							"pm.test(\"Task content is correct\", function () {\r",
							"    pm.expect(jsonData.content).to.equal(\"SupportTech\");\r",
							"});\r",
							"\r",
							"// Test to ensure 'order' exists and is a number\r",
							"pm.test(\"Order exists and is a number\", function () {\r",
							"    pm.expect(jsonData.order).to.be.a('number');\r",
							"});\r",
							"\r",
							"// Test to ensure 'is_completed' exists and is a boolean\r",
							"pm.test(\"Task is not completed\", function () {\r",
							"    pm.expect(jsonData.is_completed).to.be.a('boolean');\r",
							"    pm.expect(jsonData.is_completed).to.equal(false);  // Task is expected to be incomplete when created\r",
							"});\r",
							"\r",
							"\r",
							"// Test to check the URL to the task\r",
							"pm.test(\"Task URL is a string\", function () {\r",
							"    pm.expect(jsonData.url).to.be.a('string');\r",
							"    pm.expect(jsonData.url).to.contain(jsonData.id);  // Ensure URL contains the task ID\r",
							"});\r",
							"\r",
							"// Test to check that the response time is less than 1500ms\r",
							"pm.test(\"Response time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "194bda84-aa50-4cfa-8403-b1aa1a3c71aa ",
						"type": "text"
					},
					{
						"key": "Content-Typ",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/tasks?content=SupportTech&project_id={{Project_ID}}&section_id={{Section_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"tasks"
					],
					"query": [
						{
							"key": "content",
							"value": "SupportTech"
						},
						{
							"key": "project_id",
							"value": "{{Project_ID}}"
						},
						{
							"key": "section_id",
							"value": "{{Section_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GETanActiveTask",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/tasks/{{Task_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"tasks",
						"{{Task_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a task",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"value": "$(uuidgen)"
					},
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"content\": \"Call_Center\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/rest/v2/tasks/{{Task_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"tasks",
						"{{Task_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Close a task",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/tasks/{{Task_ID}}/close",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"tasks",
						"{{Task_ID}}",
						"close"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reopen Task",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/tasks/{{Task_ID}}/reopen",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"tasks",
						"{{Task_ID}}",
						"reopen"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all comments",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/comments?task_id={{Task_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"comments"
					],
					"query": [
						{
							"key": "task_id",
							"value": "{{Task_ID}}"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"Comment_ID\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"value": "$(uuidgen)"
					},
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"task_id\": \"{{Task_ID}}\",\r\n    \"content\": \"I Want To Attend The ٍٍScholarship\",\r\n    \"attachment\": {\r\n        \"resource_type\": \"file\",\r\n        \"file_url\": \"https://s3.amazonaws.com/domorebetter/Todoist+Setup+Guide.pdf\",\r\n        \"file_type\": \"application/pdf\",\r\n        \"file_name\": \"File.pdf\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/rest/v2/comments?task_id={{Task_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"comments"
					],
					"query": [
						{
							"key": "task_id",
							"value": "{{Task_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a comment",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/comments/{{Comment_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"comments",
						"{{Comment_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a comment",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"value": "$(uuidgen)"
					},
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"content\": \"I Want To Cancel IT\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/rest/v2/comments/{{Comment_ID}}?content=I Want To Cancel IT",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"comments",
						"{{Comment_ID}}"
					],
					"query": [
						{
							"key": "content",
							"value": "I Want To Cancel IT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a comment",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/comments/{{Comment_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"comments",
						"{{Comment_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a task",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/tasks/{{Task_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"tasks",
						"{{Task_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteSection",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "37bbe59ba5aa12cf5094e104737e4a875894a314",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/sections/{{Section_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"sections",
						"{{Section_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateAlabel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"label_ID\", jsonData.id);\r",
							"\r",
							"\r",
							"// Test to check if the response status is 200 OK\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to ensure 'id' exists and is a string\r",
							"pm.test(\"Label ID is a string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'name' exists and matches the input\r",
							"pm.test(\"Label name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'color' exists and is a string\r",
							"pm.test(\"Label color is a string\", function () {\r",
							"    pm.expect(jsonData.color).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'order' exists and is a number\r",
							"pm.test(\"Label order is a number\", function () {\r",
							"    pm.expect(jsonData.order).to.be.a('number');\r",
							"});\r",
							"\r",
							"// Test to ensure 'is_favorite' exists and is a boolean\r",
							"pm.test(\"Label favorite status is a boolean\", function () {\r",
							"    pm.expect(jsonData.is_favorite).to.be.a('boolean');\r",
							"    pm.expect(jsonData.is_favorite).to.equal(false);  // Default is false unless specified\r",
							"});\r",
							"\r",
							"// Test to check that the response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer YOUR_API_TOKEN"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/rest/v2/labels?name=Session9",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"labels"
					],
					"query": [
						{
							"key": "name",
							"value": "Session9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAlabel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body into JSON format\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Test to check if the response status is 200 OK\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to ensure 'id' exists and is a string\r",
							"pm.test(\"Label ID is a string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'name' exists and is a string\r",
							"pm.test(\"Label name is a string\", function () {\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'color' exists and is a string\r",
							"pm.test(\"Label color is a string\", function () {\r",
							"    pm.expect(jsonData.color).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'order' exists and is a number\r",
							"pm.test(\"Label order is a number\", function () {\r",
							"    pm.expect(jsonData.order).to.be.a('number');\r",
							"});\r",
							"\r",
							"// Test to ensure 'is_favorite' exists and is a boolean\r",
							"pm.test(\"Label favorite status is a boolean\", function () {\r",
							"    pm.expect(jsonData.is_favorite).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"// Test to check that the response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer YOUR_API_TOKEN"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/rest/v2/labels/{{label_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"labels",
						"{{label_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateLabel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body into JSON format\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Test to check if the response status is 200 OK\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to ensure 'id' exists and is a string\r",
							"pm.test(\"Label ID is a string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'name' exists and matches the updated name\r",
							"pm.test(\"Label name is updated correctly\", function () {\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.name).to.equal(\"Session2\");  // Expected updated name\r",
							"});\r",
							"\r",
							"// Test to ensure 'color' exists and is a string\r",
							"pm.test(\"Label color is a string\", function () {\r",
							"    pm.expect(jsonData.color).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test to ensure 'order' exists and is a number\r",
							"pm.test(\"Label order is a number\", function () {\r",
							"    pm.expect(jsonData.order).to.be.a('number');\r",
							"});\r",
							"\r",
							"// Test to ensure 'is_favorite' exists and is a boolean\r",
							"pm.test(\"Label favorite status is a boolean\", function () {\r",
							"    pm.expect(jsonData.is_favorite).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"// Test to check that the response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"value": "$(uuidgen)"
					},
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Session2\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/rest/v2/labels/{{label_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"labels",
						"{{label_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteLabel",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/labels/{{label_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"labels",
						"{{label_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a project",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/projects/{{Project_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"projects",
						"{{Project_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllSharedLabels",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "{{base_url}}/rest/v2/labels/shared",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"labels",
						"shared"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "RenameSharedLabels",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"value": "$(uuidgen)"
					},
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/rest/v2/labels/shared/rename?name=Session1&new_name=Session4",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"labels",
						"shared",
						"rename"
					],
					"query": [
						{
							"key": "name",
							"value": "Session1"
						},
						{
							"key": "new_name",
							"value": "Session4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "RemoveSharedLabels",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"value": "$(uuidgen)"
					},
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/rest/v2/labels/shared/remove?name=Session4",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rest",
						"v2",
						"labels",
						"shared",
						"remove"
					],
					"query": [
						{
							"key": "name",
							"value": "Session4"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "Project_ID",
			"value": ""
		},
		{
			"key": "Section_ID",
			"value": "id"
		},
		{
			"key": "Task_ID",
			"value": ""
		},
		{
			"key": "Comment_ID",
			"value": ""
		},
		{
			"key": "label_ID",
			"value": ""
		}
	]
}